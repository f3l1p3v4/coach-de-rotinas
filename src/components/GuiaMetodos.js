import React, { useState, useEffect } from 'react';

// 1. Criamos uma lista com todos os nossos m√©todos e descri√ß√µes detalhadas
const metodos = [
  {
    titulo: 'Time Blocking (Blocos de Tempo)',
    descricao: 'Atribua uma tarefa espec√≠fica a cada bloco de tempo no seu dia. Em vez de uma lista vaga de "estudar", a sua agenda diz "09:00 - 09:50: Rever aula de Direito Constitucional". Isto elimina a fadiga de decis√£o e cria um compromisso claro com as suas tarefas.'
  },
  {
    titulo: 'T√©cnica Pomodoro',
    descricao: 'Trabalhe em sprints de foco total por 25 minutos, seguidos por uma pausa obrigat√≥ria de 5 minutos. Ap√≥s 4 ciclos, fa√ßa uma pausa mais longa (15-30 min). O segredo √© que a barreira para come√ßar algo por "apenas 25 minutos" √© muito baixa, vencendo a procrastina√ß√£o.'
  },
  {
    titulo: 'Habit Stacking (Empilhar H√°bitos)',
    descricao: 'Ancore um novo h√°bito a um que voc√™ j√° faz automaticamente. A f√≥rmula √©: "Depois de [H√ÅBITO ATUAL], eu vou [NOVO H√ÅBITO]". Exemplo: "Logo depois de escovar os dentes de manh√£, eu vou ler uma p√°gina de um livro". Isto usa o momentum de um h√°bito existente para construir um novo.'
  },
  {
    titulo: 'Eat The Frog (Engolir o Sapo)',
    descricao: 'Identifique a sua tarefa mais importante e mais dif√≠cil do dia (o "sapo") e fa√ßa-a logo pela manh√£. Ao concluir o maior desafio primeiro, voc√™ ganha uma enorme sensa√ß√£o de realiza√ß√£o e momentum que impulsiona a produtividade para o resto do dia.'
  },
  {
    titulo: 'A Regra dos 2 Minutos',
    descricao: 'Se uma tarefa leva menos de dois minutos para ser conclu√≠da, fa√ßa-a imediatamente. Responder a um e-mail, arrumar a cama, colocar a lou√ßa na m√°quina. Isto impede que pequenas tarefas se acumulem e sobrecarreguem a sua mente e o seu ambiente.'
  }
];

const GuiaMetodos = () => {
  const [indiceAtual, setIndiceAtual] = useState(0);
  const [visivel, setVisivel] = useState(true);

  useEffect(() => {
    // 2. Criamos um intervalo que vai mudar o m√©todo a cada 20 segundos
    const intervalId = setInterval(() => {
      setVisivel(false); // Come√ßa a transi√ß√£o de fade-out

      // 3. Esperamos a transi√ß√£o terminar para trocar o conte√∫do
      setTimeout(() => {
        setIndiceAtual((indiceAnterior) => (indiceAnterior + 1) % metodos.length); // Loop
        setVisivel(true); // Come√ßa a transi√ß√£o de fade-in com o novo conte√∫do
      }, 500); // 0.5s, o mesmo tempo da nossa transi√ß√£o de CSS
    }, 30000); // 20 segundos

    // 4. Limpamos o intervalo quando o componente for desmontado para evitar erros
    return () => clearInterval(intervalId);
  }, []);

  const metodoAtual = metodos[indiceAtual];

  return (
    <div className="content-section guia-metodos-container">
      <h3>üöÄ Estrat√©gias Fundamentais</h3>
      {/* 5. O conte√∫do agora √© din√¢mico e tem uma classe para a transi√ß√£o */}
      <div className={`metodo-card ${visivel ? 'fade-in' : 'fade-out'}`}>
        <h4>{metodoAtual.titulo}</h4>
        <p>{metodoAtual.descricao}</p>
      </div>
    </div>
  );
}

export default GuiaMetodos;